clc; clear; close all;
format compact;

aero = load('aerodynamics.mat');
fuse = load('fuselage_materials.mat');
moto = load('motor_mount_materials.mat');
wing = load('wing_spar_materials.mat');

%% Stability
swp_ang = 20; % sweep angle [deg]
swp_ang_rad = deg2rad(swp_ang); % [rad]

xnp = 0.037 + 1/4 * aero.c * (1 - tan(swp_ang_rad)) % Neutral Point [m]

% Masses and positions (example)

masses = [aero.m_motor, aero.m_payload, ...
          aero.m_battery, aero.m_battery];   % Masses of objects [kg]

x_motor = 0;
x_body = 0;
x_payload = xnp;
x_battery = xnp;

positions = [x_motor, x_payload, ...
             x_battery, x_body] % Positions of objects [m]

% Calculate the center of mass
total_mass = sum(masses)            % Total mass
weighted_sum = sum(masses .* positions) % Weighted sum of masses and positions

xcg = weighted_sum / total_mass  % Center of mass

sm = (xnp - xcg)/aero.c % Stability Margin (between 0.05 and 0.4 is acceptable)

l_body = 0.5; % Body length [m]
lh = l_body - xnp % horizontal tail moment arm [m]
ch = 0.125 % chord length of horizontal rudder [m]
bh = 0.25 % wingspan of horizontal rudder [m]
Ah = ch*bh % Area of horizontal rudder [m^2]

Vh = (Ah*lh)/(aero.Awing*aero.c) % Horizontal Tail Volume Coeff

lv = lh % vertical tail moment arm [m]
cv = ch*0.75 % chord length of vertical rudder [m]
bv = ch*0.75 % wingspan of vertical rudder [m]
Av = cv*bv % Area of vertical rudder [m^2]

Vv = (Av*lv)/(aero.Awing*aero.b) % vertical Tail Volume Coeff

gamma = 3; % Dihedral angle

B = lv/aero.b * gamma/aero.Cl % Blaine Stability (<5 unstable, =5 neutral, >5 stable)

